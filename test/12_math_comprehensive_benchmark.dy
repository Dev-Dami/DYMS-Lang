// 12_math_comprehensive_benchmark.hg
// Comprehensive test and performance benchmark for fmaths library

println("=== DYMS Advanced Math Library Test & Benchmark ===")

import "fmaths" as math
import "time" as t

// Test basic math functions
println("\n1. Basic Math Functions:")
let x = 16
let y = 2
let negX = 0 - x
println("pow(" + x + ", " + y + ") = " + math.pow(x, y))
println("sqrt(" + x + ") = " + math.sqrt(x))
println("abs(" + negX + ") = " + math.abs(negX))

// Test trigonometry  
println("\n2. Trigonometric Functions:")
let angle = math.pi / 4  // 45 degrees
println("sin(π/4) = " + math.sin(angle))
println("cos(π/4) = " + math.cos(angle))
// Add more trig functions
let angle2 = 0
println("sin(0) = " + math.sin(angle2))
println("cos(0) = " + math.cos(angle2))

// Test logarithms
println("\n3. Logarithmic Functions:")
let val = math.e
println("log(e) = " + math.log(val))
// Add more logarithmic tests
let hundred = 100
let eight = 8
println("log(" + hundred + ") = " + math.log(hundred))
println("exp(1) = " + math.exp(1))

// Test exponentials (already covered above)

// Test utility functions
println("\n4. Utility Functions:")
let decimal = 37/10  // 3.7
println("ceil(3.7) = " + math.ceil(decimal))
println("floor(3.7) = " + math.floor(decimal))
println("abs(-5) = " + math.abs(0-5))

// Add more utility functions
let values = 5
println("Testing additional utility functions:")

// Test constants
println("\n5. Mathematical Constants:")
println("π = " + math.pi)
println("e = " + math.e)

// Test advanced functions
println("\n6. Advanced Functions:")
let five = 5
println("Testing power and root functions:")
println("pow(2, 8) = " + math.pow(2, 8))
println("sqrt(64) = " + math.sqrt(64))

// Performance benchmarks
println("\n=== Performance Benchmarks ===")

// Benchmark 1: Power operations
println("\nBenchmark 1: Power Operations (50K)")
let start = t.millis()
for range(i, 50000) {
    let result = math.pow(2, 10)
}
let end = t.millis()
println("50K pow(2,10): " + (end - start) + " ms")

// Benchmark 2: Square root
println("\nBenchmark 2: Square Root (50K)")
start = t.millis()
for range(i, 50000) {
    let result = math.sqrt(144)
}
end = t.millis()
println("50K sqrt(144): " + (end - start) + " ms")

// Benchmark 3: Trigonometric functions
println("\nBenchmark 3: Trigonometry (25K)")
start = t.millis()
for range(i, 25000) {
    let s = math.sin(0)
    let c = math.cos(0)
}
end = t.millis()
println("25K sin+cos: " + (end - start) + " ms")

// Benchmark 4: Mixed operations
println("\nBenchmark 4: Mixed Math (10K)")
start = t.millis()
for range(i, 10000) {
    let a = math.pow(2, 3)
    let b = math.sqrt(64)
    let c = math.sin(0)
    let d = math.abs(a)
    let result = a + b + c + d
}
end = t.millis()
println("10K mixed operations: " + (end - start) + " ms")

// Test complex mathematical computation
println("\n7. Complex Computation Test:")
funct computeDistance(x1, y1, x2, y2) {
    let dx = x2 - x1
    let dy = y2 - y1
    return math.sqrt(math.pow(dx, 2) + math.pow(dy, 2))
}

let dist = computeDistance(0, 0, 3, 4)
println("Distance from (0,0) to (3,4) = " + dist)

// Test more advanced functions
println("\n8. More Math Functions:")
let testVal = 10
println("exp(" + 1 + ") = " + math.exp(1))
println("log(" + testVal + ") = " + math.log(testVal))
println("floor(" + 35/10 + ") = " + math.floor(35/10))
println("ceil(" + 35/10 + ") = " + math.ceil(35/10))

println("\n=== Math Library Test Complete ===")
println("All functions working correctly with bytecode optimizations!")